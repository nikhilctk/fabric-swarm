version: '3'

volumes:
  orderer0.example.com:
#   orderer1.example.com:
#   orderer2.example.com:
#   orderer3.example.com:
#   orderer4.example.com:
#   ca.org1.example.com:
#   ca.org2.example.com:
#   peer0.org1.example.com:
#   peer1.org1.example.com:
#   peer0.org2.example.com:
#   peer1.org2.example.com:

# networks:
#   sample:

services:

  orderer0:
    deploy:
      replicas: 1
    image: hyperledger/fabric-orderer:latest
    environment:
      - FABRIC_LOGGING_SPEC=INFO
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      # enabled TLS
      - ORDERER_GENERAL_TLS_ENABLED=true
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - ORDERER_KAFKA_TOPIC_REPLICATIONFACTOR=1
      - ORDERER_METRICS_PROVIDER=prometheus
      - ORDERER_KAFKA_VERBOSE=true
      - ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_CLUSTER_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - ORDERER_OPERATIONS_LISTENADDRESS=orderer0.example.com:9443
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: orderer
    volumes:
        - ../channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block
        - ../crypto-config/ordererOrganizations/example.com/orderers/orderer0.example.com/msp:/var/hyperledger/orderer/msp
        - ../crypto-config/ordererOrganizations/example.com/orderers/orderer0.example.com/tls/:/var/hyperledger/orderer/tls
        - orderer0.example.com:/var/hyperledger/production/orderer
    ports:
      - 7050:7050
    # container_name: orderer0.example.com
    hostname: orderer0.example.com
    # networks:
    #   - sample

  # orderer1.example.com:
  #   extends:
  #     file:   base/docker-compose-base.yaml
  #     service: orderer1.example.com
  #   container_name: orderer1.example.com
  #   networks:
  #     - sample
  #   deploy:
  #     replicas: 1

  # orderer2.example.com:
  #   extends:
  #     file:   base/docker-compose-base.yaml
  #     service: orderer2.example.com
  #   container_name: orderer2.example.com
  #   networks:
  #     - sample
  #   deploy:
  #     replicas: 1

  # orderer3.example.com:
  #   extends:
  #     file:   base/docker-compose-base.yaml
  #     service: orderer3.example.com
  #   container_name: orderer3.example.com
  #   networks:
  #     - sample
  #   deploy:
  #     replicas: 1

  # orderer4.example.com:
  #   extends:
  #     file:   base/docker-compose-base.yaml
  #     service: orderer4.example.com
  #   container_name: orderer4.example.com
  #   networks:
  #     - sample
  #   deploy:
  #     replicas: 1

  # peer0.org1.example.com:
  #   container_name: peer0.org1.example.com
  #   extends:
  #     file:  base/docker-compose-base.yaml
  #     service: peer0.org1.example.com
  #   environment:
  #     - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
  #     - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=org1couchdb0:5984
  #     - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=
  #     - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=
  #   depends_on:
  #     - org1couchdb0
  #   networks:
  #     - sample
  #   deploy:
  #     replicas: 1

  # org1couchdb0:
  #   container_name: org1couchdb0
  #   image: hyperledger/fabric-couchdb
  #   environment:
  #     - COUCHDB_USER=
  #     - COUCHDB_PASSWORD=
  #   ports:
  #     - 5984:5984
  #   networks:
  #     - sample
  #   deploy:
  #     replicas: 1

  # peer1.org1.example.com:
  #   container_name: peer1.org1.example.com
  #   extends:
  #     file:  base/docker-compose-base.yaml
  #     service: peer1.org1.example.com
  #   environment:
  #     - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
  #     - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=org1couchdb1:5984
  #     - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=
  #     - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=
  #   depends_on:
  #     - org1couchdb1
  #   networks:
  #     - sample
  #   deploy:
  #     replicas: 1

  # org1couchdb1:
  #   container_name: org1couchdb1
  #   image: hyperledger/fabric-couchdb
  #   environment:
  #     - COUCHDB_USER=
  #     - COUCHDB_PASSWORD=
  #   ports:
  #     - 6984:5984
  #   networks:
  #     - sample

  # peer0.org2.example.com:
  #   container_name: peer0.org2.example.com
  #   extends:
  #     file:  base/docker-compose-base.yaml
  #     service: peer0.org2.example.com
  #   environment:
  #     - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
  #     - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=org2couchdb0:5984
  #     - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=
  #     - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=
  #   depends_on:
  #     - org2couchdb0
  #   networks:
  #     - sample

  # org2couchdb0:
  #   container_name: org2couchdb0
  #   image: hyperledger/fabric-couchdb
  #   environment:
  #     - COUCHDB_USER=
  #     - COUCHDB_PASSWORD=
  #   ports:
  #     - 7984:5984
  #   networks:
  #     - sample

  # peer1.org2.example.com:
  #   container_name: peer1.org2.example.com
  #   extends:
  #     file:  base/docker-compose-base.yaml
  #     service: peer1.org2.example.com
  #   environment:
  #     - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
  #     - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=org2couchdb1:5984
  #     - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=
  #     - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=
  #   depends_on:
  #     - org2couchdb1
  #   networks:
  #     - sample

  # org2couchdb1:
  #   container_name: org2couchdb1
  #   image: hyperledger/fabric-couchdb
  #   environment:
  #     - COUCHDB_USER=
  #     - COUCHDB_PASSWORD=
  #   ports:
  #     - 8984:5984
  #   networks:
  #     - sample

  
  # cli:
  #   container_name: cli
  #   image: hyperledger/fabric-tools:$IMAGE_TAG
  #   tty: true
  #   stdin_open: true
  #   environment:
  #     - SYS_CHANNEL=$SYS_CHANNEL
  #     - GOPATH=/opt/gopath
  #     - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
  #     #- FABRIC_LOGGING_SPEC=DEBUG
  #     - FABRIC_LOGGING_SPEC=INFO
  #     - CORE_PEER_ID=cli
  #     - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
  #     - CORE_PEER_LOCALMSPID=org1MSP
  #     - CORE_PEER_TLS_ENABLED=true
  #     - CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt
  #     - CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key
  #     - CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
  #     - CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
  #   working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
  #   command: /bin/bash
  #   volumes:
  #       - /var/run/:/host/var/run/
  #       - ./chaincode/:/opt/gopath/src/github.com/chaincode
  #       - ./scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts
  #       - ./crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/
  #       - ./channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts
  #   depends_on:
  #     - orderer0.example.com
  #     - orderer1.example.com
  #     - orderer2.example.com
  #     - orderer3.example.com
  #     - orderer4.example.com
  #     - peer0.org1.example.com
  #     - peer1.org1.example.com
  #     - peer0.org2.example.com
  #     - peer1.org2.example.com
  #   networks:
  #     - sample
  
  # cadvisor:
  #   image: google/cadvisor:$IMAGE_TAG
  #   volumes:
  #     - /:/rootfs:ro
  #     - /var/run:/var/run:rw
  #     - /sys:/sys:ro
  #     - /var/lib/docker/:/var/lib/docker:ro
  #   ports:
  #     - 8081:8080
  #   networks:
  #     - sample
  #   # restart: always

  # ca.org1.example.com:
  #   image: hyperledger/fabric-ca:$IMAGE_TAG
  #   environment:
  #     - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
  #     - FABRIC_CA_SERVER_CA_NAME=ca-org1
  #     - FABRIC_CA_SERVER_TLS_ENABLED=true
  #     - FABRIC_CA_SERVER_TLS_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.org1.example.com-cert.pem
  #     - FABRIC_CA_SERVER_TLS_KEYFILE=/etc/hyperledger/fabric-ca-server-config/priv_sk
  #     - FABRIC_CA_SERVER_PORT=7054
  #   ports:
  #     - 7054:7054
  #   command: sh -c 'fabric-ca-server start --ca.certfile /etc/hyperledger/fabric-ca-server-config/ca.org1.example.com-cert.pem --ca.keyfile /etc/hyperledger/fabric-ca-server-config/priv_sk -b admin:adminpw -d'
  #   volumes:
  #     - ./fabric-ca-server-config.yaml:/etc/hyperledger/fabric-ca-server/fabric-ca-server-config.yaml
  #     - ./crypto-config/peerOrganizations/org1.example.com/ca/:/etc/hyperledger/fabric-ca-server-config
  #   container_name: ca_org1
  #   networks:
  #     - sample

  # ca.org2.example.com:
  #   image: hyperledger/fabric-ca:$IMAGE_TAG
  #   environment:
  #     - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
  #     - FABRIC_CA_SERVER_CA_NAME=ca-org2
  #     - FABRIC_CA_SERVER_TLS_ENABLED=true
  #     - FABRIC_CA_SERVER_TLS_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.org2.example.com-cert.pem
  #     - FABRIC_CA_SERVER_TLS_KEYFILE=/etc/hyperledger/fabric-ca-server-config/priv_sk
  #     - FABRIC_CA_SERVER_PORT=8054
  #   ports:
  #     - 8054:8054
  #   command: sh -c 'fabric-ca-server start --ca.certfile /etc/hyperledger/fabric-ca-server-config/ca.org2.example.com-cert.pem --ca.keyfile /etc/hyperledger/fabric-ca-server-config/priv_sk -b admin:adminpw -d'
  #   volumes:
  #     - ./fabric-ca-server-config.yaml:/etc/hyperledger/fabric-ca-server/fabric-ca-server-config.yaml
  #     - ./crypto-config/peerOrganizations/org2.example.com/ca/:/etc/hyperledger/fabric-ca-server-config
  #   container_name: ca_org2
  #   networks:
  #     - sample

  